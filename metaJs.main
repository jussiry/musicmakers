"use strict";
(function(){
var MODSELF, edide = {};
edide.global = (function (edide, mod_global) {
return typeof global !== 'undefined' ? global : window;
}).call(MODSELF={}, edide, MODSELF);
edide.inEditor = (function (edide, inEditor) {Object.defineProperty(this, 'module_name', {value:'inEditor'});
inEditor = (inEditor === true) || false
return inEditor;
}).call(MODSELF={}, edide, MODSELF);
edide.edideNamespace = (function (edide, edideNamespace) {
return 'edide'
}).call(MODSELF={}, edide, MODSELF);
edide.edideNs = (function (edide, edideNs) {
var base, name;
return (base = edide.global)[name = edide.edideNamespace] != null ? base[name] : base[name] = {};
}).call(MODSELF={}, edide, MODSELF);
edide.editorModule = (function (edide, editorModule) {
var editorModule;
editorModule = edide.inEditor ? edide.edideNs : null;
return editorModule;
}).call(MODSELF={}, edide, MODSELF);
edide.onUnload = (function (edide, onUnload) {
var ref, ref1;
return (ref = (ref1 = edide.editorModule) != null ? ref1.unload.add : void 0) != null ? ref : () => {};
}).call(MODSELF={}, edide, MODSELF);
edide.moduleGate = (function (edide, moduleGate) {Object.defineProperty(this, 'module_name', {value:'moduleGate'});
if (!edide.inEditor) {
  return this;
}
this.root; // module that is edited in root
this.rootName;
this.active; // module that is currently being edited (can be root or in window)
this.activeName;
this.executing;
this.executingName;
return moduleGate;
}).call(MODSELF={}, edide, MODSELF);
edide.rejectIfRecompiled = (function (edide, rejectIfRecompiled) {
if (!edide.inEditor) {
  return () => {};
}
return (promise) => {
  var recompiled, rootName;
  ({rootName} = edide.moduleGate);
  recompiled = false;
  edide.editorModule.editor_events.on('before_recompile', () => {
    return recompiled = true;
  });
  return promise.then(function(arg) {
    if (recompiled || rootName !== edide.moduleGate.rootName) { // root module changed
      return Promise.reject(); // quiet rejection; no need to show error
    } else {
      return arg; // arg get wrapped in promise
    }
  });
};
}).call(MODSELF={}, edide, MODSELF);
edide.promise = (function (edide, promise) {Object.defineProperty(this, 'module_name', {value:'promise'});
var localPromise, ref;
localPromise = edide.global.origPromise = (ref = edide.global.origPromise) != null ? ref : edide.global.Promise;
this.new = function(cb) {
  if (edide.inEditor) {
    return edide.rejectIfRecompiled(new Promise(cb)); // don't fire cb if code has been re-executed in the meantime
  } else {
    return new Promise(cb);
  }
};
this.all = function(cbArray) {
  if (edide.inEditor) { // check that after resolved, still editing same module
    return edide.rejectIfRecompiled(Promise.all(cbArray));
  } else {
    return Promise.all(cbArray);
  }
};
this.resolve = Promise.resolve.bind(Promise);
this.reject = Promise.reject.bind(Promise);
return promise;
}).call(MODSELF={}, edide, MODSELF);
edide.qs = (function (edide, qs) {
return (selector, el = document) => {
  return el.querySelector(selector);
};
}).call(MODSELF={}, edide, MODSELF);
edide.scriptContainer = (function (edide, scriptContainer) {
var createContainer, ref;
createContainer = () => {
  var s;
  s = document.createElement('div');
  s.id = 'scripts';
  return s;
};
return (ref = edide.qs('#scripts')) != null ? ref : document.body.appendChild(createContainer());
}).call(MODSELF={}, edide, MODSELF);
edide.showError = (function (edide, showError) {
var error;
error = (err) => {
  if (edide.inEditor) {
    return edide.editorModule.editor_error.show(err);
  } else if (typeof edide.global.require === 'object' && (edide.global[edide.edideNamespace].prodErrorPrinter != null)) {
    return edide.global[edide.edideNamespace].prodErrorPrinter.showError(err);
  } else {
    return console.error(err);
  }
};
return (err) => {
  var err2;
  if (err != null ? err.stack : void 0) {
    return error(err); // create error to capture stack trace
  } else {
    try {
      throw Error(err);
    } catch (error1) {
      err2 = error1;
      return error(err2);
    }
  }
};
}).call(MODSELF={}, edide, MODSELF);
edide.requireScript = (function (edide, requireScript) {
var base;
if ((base = edide.global).requireScriptPromises == null) {
  base.requireScriptPromises = new Map;
}
return (scriptSrc) => {
  var promise;
  if (promise = requireScriptPromises.get(scriptSrc)) {
    return promise;
  } else {
    requireScriptPromises.set(scriptSrc, promise = edide.promise.new((resolve) => {
      var el;
      console.log('adding promised', scriptSrc);
      el = document.createElement('script');
      edide.scriptContainer.appendChild(el);
      el.onload = resolve; //load_ready
      el.type = 'application/javascript';
      return el.src = scriptSrc;
    }));
    return promise.catch((err) => {
      edide.showError(err);
      return requireScriptPromises.delete(scriptSrc);
    });
  }
};
}).call(MODSELF={}, edide, MODSELF);
edide.keep = (function (edide, keep) {Object.defineProperty(this, 'module_name', {value:'keep'});
var keep;
keep = (prop) => {
  return prop;
};
return keep;
}).call(MODSELF={}, edide, MODSELF);
edide.debugIf = (function (edide, debugIf) {Object.defineProperty(this, 'module_name', {value:'debugIf'});
var editorCm, editor_error, editor_events, editor_gutters, inspectorCode, ref, round;
round = 0;
({editor_events, editor_error, editorCm, editor_gutters, inspectorCode} = (ref = edide.editorModule) != null ? ref : {});
return (test = true) => { // not sure if true default is good idea (breaks semantics)
  var module;
  if (!edide.inEditor) {
    return;
  }
  round++;
  module = edide.moduleGate.activeName;
  if (test) {
    editor_events.on('error', () => {
      var cm, lastErrorLocation, thrownErrorLine;
      if (lastErrorLocation = editor_error.getLocations(edide.moduleGate.activeName)[0]) {
        thrownErrorLine = lastErrorLocation.first_line;
        cm = editorCm.active();
        editor_gutters.clearErrors(cm); // remove error marker
        editor_gutters.setInspectorMarker(cm, thrownErrorLine, round);
      }
      return false; // only once
    });
    return inspectorCode.inspectorInjectionPreStr(module) + "; throw new Error('debug breakpoint')";
  } else {
    return '';
  }
};
return debugIf;
}).call(MODSELF={}, edide, MODSELF);
edide.addEventListener = (function (edide, addEventListener) {
var ael, original;
({original} = edide.keep({
  original: window.addEventListener // cache orig listener in case it gets overwrittein
}));
ael = (element, eventName, action, options, useCapture) => {
  var remove;
  if (options != null ? options.module_name : void 0) {
    eval(edide.debugIf(1));
  }
  original.call(element, eventName, action, options, useCapture);
  edide.onUnload(remove = () => {
    return element.removeEventListener(eventName, action, options, useCapture);
  });
  return remove;
};
ael.original = original;
return ael;
}).call(MODSELF={}, edide, MODSELF);
edide.addEventListeners = (function (edide, addEventListeners) {
var addEventListeners;
return addEventListeners = (element, eventActions, action) => {
  var event, eventName, i, len, ref;
  if (typeof eventActions === 'string') {
    ref = eventActions.split(' ');
    for (i = 0, len = ref.length; i < len; i++) {
      event = ref[i];
      edide.addEventListener(element, event, action);
    }
  } else {
    for (eventName in eventActions) {
      action = eventActions[eventName];
      edide.addEventListener(element, eventName, action);
    }
  }
};
}).call(MODSELF={}, edide, MODSELF);
edide.jquery = (function (edide, jquery) {Object.defineProperty(this, 'module_name', {value:'jquery'});
if (edide.inEditor && !$.fn.onOrig) { // only run once
  $.fn.onOrig = $.fn.on;
  $.fn.on = function(...args) {
    edide.onUnload(() => {
      return this.off(...args);
    });
    return this.onOrig(...args);
  };
}
this.load = (version = '2.2.4') => {
  if (edide.global.jQuery != null) {
    return Promise.resolve();
  }
  return edide.requireScript(`https://code.jquery.com/jquery-${version}.min.js`);
};
this.addListeners = (el, events, ...delegateAction) => {
  edide.onUnload(() => {
    return $(el).off(events, delegateAction[delegateAction.length - 1]);
  });
  return $(el).on(events, ...delegateAction);
};
this.delegate = (el, events, delegate, action) => {
  return edide.addEventListeners(el, events, (ev) => {
    if ($(ev.target).closest(delegate).length) {
      action.call(ev.target, ev);
    }
  });
};
return jquery;
}).call(MODSELF={}, edide, MODSELF);
edide.metaCore = (function (edide, metaCore) {Object.defineProperty(this, 'module_name', {value:'metaCore'});
var noop = function(){}, u;
$.fn.or = function(s){ return this.length ? this : $(s||'body') };
var m = window.meta = {edit:[]};
var k = m.key = {};
k.meta = {17:17, 91:17, 93:17, 224:17, 18: 17}; // ALT added
function withMeta(eve){ return eve.metaKey || eve.ctrlKey || eve.altKey } // ALT added
var defaults = {
	8: { // backspace: close root or go back on submenu
		on: () => k.at == m.edit ? m.flip(false) : m.check('down', 'back')
	},
	27: { // esc: close and reset menu
	  up: () => k.wipe()
	}
}
k.down = function(eve){
	var key = (k.eve = m.eve = eve).which = eve.which || eve.fake || eve.keyCode;
  if(eve.repeat){ return }
	if(!k.meta[key] && withMeta(eve) && !k.at[key]) {
	  return m.flip(false)
  } // cancel and close when no action and "meta key" held down (e.g. ctrl+c)
	if(!eve.fake && key === k.last){ return }; k.last = key; // jussi: polyfilling eve.repeat?
	if(!eve.fake && $(eve.target).closest('input, textarea, [contenteditable=true]').length && !$(eve.target).closest('#meta').length){
    if(meta.flip.is() && !withMeta(eve)) eve.preventDefault()
	}
	m.check('on', key, k.at || (k.at = m.edit));
	if(k.meta[key]){ m.flip() }
}
k.down.keys = {} // currently pressed keys
k.up = function(eve){ var tmp;
	var key = (k.eve = m.eve = eve).which = eve.which || eve.fake || eve.keyCode;
	k.last = null;
	m.check('up', key);
	if(k.meta[key] && m.check.fired){
		m.close()
	}
}
m.flip = function(tmp){
	((tmp === false) || (!tmp && m.ui.board.is(':visible')))?
		m.close() : m.open();
}
m.open = function(){
  m.check.fired = null;
  m.ui.board.removeClass('meta-none');
}
m.close = function(){
	Object.keys(k.down.keys).forEach((keyDown) => {
	  m.check('up', keyDown);
	})
	m.ui.board.addClass('meta-none')
}
m.flip.is = function(){
	return m.ui.board.is(':visible');
}
m.flip.wait = 500;
m.check = function(how, key, at){
  if(!m.flip.is() && !k.meta[key]){ return } // TEMP: cancel non-open events when closed TODO make optional
  at = k.at || m.edit;
	var next = at[key];
	if(!next){ return }
	var tmp = k.eve || noop;
	if(tmp.preventDefault){ tmp.preventDefault()} // prevent typing (etc) when action found
	if(next[how]){
			next[how](m.eve);
			meta.ui.blink();
			m.check.fired = true;
			if(how == 'up') delete k.down.keys[key]
			else            k.down.keys[key] = 1;
	}
	if('up' == how){ return }
	if(at != next){ next.back = at }
	(k.combo || (k.combo = [])).push(key);
	m.list(next, true);
}
function defaultSort(a,b){
	a = a.combo.slice(-1)[0] || 0;
	if(a.length){ a = a.toUpperCase().charCodeAt(0) }
	b = b.combo.slice(-1)[0] || 0;
	if(b.length){ b = b.toUpperCase().charCodeAt(0) }
	return (a < b)? -1 : 1;
}
m.list = function(at, opt){
	if(!at){ return m.flip(false) }
	var l = [];
	$.each(at, function(i,k){ 'back' != i && k && k.combo && k.name && l.push(k) });
	if(!l.length){ return }
	k.at = at;
	if(at.sort !== null){ l = l.sort(at.sort || defaultSort) }
	var $ul = $('#meta .meta-menu ul')
	$ul.children('li').addClass('meta-none').hide(); setTimeout(function(){ $ul.children('.meta-none').remove() },250); // necessary fix for weird bug glitch
	$.each(l, function(i, k){
	  var $li = $('<li>').text(k.name).data(k)
		$ul.append($li);
		if(k.styles) meta.ui.iniline($li[0], k.styles);
	});
	if(opt){ m.flip(true) }
	$ul.append($('<li>').html('&larr;').on('click', function(){
		m.list(at.back);
	}));
}
m.ask = function(help, cb){
	var $ul = $('#meta .meta-menu ul').empty();
	var $put = $('<input>').attr('id', 'meta-ask').attr('placeholder', help);
	var $form = $('<form>').append($put).on('submit', function(eve){
		eve.preventDefault();
		cb($put.val());
		$li.remove();
		k.wipe();
	});
	var $li = $('<li>').append($form);
	$ul.append($li);
	m.flip(true);
	$put.focus();
}
k.wipe = function(opt){
	k.combo = [];
	if(!opt){ m.flip(false) }
	m.list(k.at = m.edit);
};
m.tap = function(){
	var on = $('.meta-on')
		.or($($(document.querySelectorAll(':hover')).get().reverse()).first())
		.or($(document.elementFromPoint(meta.tap.x, meta.tap.y)));
	return on;
}
meta.edit = function(e){
	var path = [];
	$.each(e.combo || (e.combo = []), function(i,k){
		if(!k || !k.length){ if('number' == typeof k){ path.push(k) } return }
		path.push(k.toUpperCase().charCodeAt(0));
	});
	var at = meta.edit, l = e.combo.length;
	$.each(path, function(i,k){ at = at[k] = at[k] || Object.create(defaults) });
  $.extend(at, e) // fixes overwriting when sub action is defined before parent
	e.combow = path.join(','); // deprecate?
	m.list(k.at || meta.edit);
}
$.extend(meta.edit, defaults)
return metaCore;
}).call(MODSELF={}, edide, MODSELF);
edide.metaUI = (function (edide, metaUI) {Object.defineProperty(this, 'module_name', {value:'metaUI'});
/* UI */
meta.ui = {
	blink: function(){ // hint visually that action has happened
		$('#meta').css('transition', 'none').css('background', 'none')
		setTimeout(function(){
			$('#meta')[0].style.transition = null
			$('#meta')[0].style.background = null
		})
	},
	depth: function(n){
	  if (n) {
			$('#meta').css('background', 'hsl(60, 100%,'+(85-(n*10))+'%)');
		} else {
			$('#meta')[0].style.background = null
		}
	}
}
var $m = $('<div>').attr('id', 'meta');
$m.append($('<span>').html('&#9776;').addClass('meta-start'));
$m.append($('<div>').addClass('meta-menu meta-none').append('<ul>'));
$(document.body).append($m);
meta.ui.board = $('.meta-menu', $m);
css({
	'#meta': {
		display: 'block',
		position: 'fixed',
		bottom: '2em',
		right: '2em',
		background: 'white',
		'font-size': '18pt',
		'font-family': 'Tahoma, arial',
		'border-radius': '1em',
		'text-align': 'center',
		'z-index': 999999,
		margin: 0,
		padding: 0,
		width: '2em',
		height: '2em',
		outline: 'none',
		color: '#000044',
		overflow: 'visible',
		transition: 'all 0.2s ease-in'
	},
	'#meta *': {outline: 'none'},
	'#meta .meta-none': {display: 'none'},
	'#meta span': {'line-height': '2em'},
	'#meta .meta-menu': {
		background: 'rgba(0,0,0,0.1)',
		width: '12em',
		right: '-2em',
		bottom: '-2em',
		overflow: 'visible',
		position: 'absolute',
		'overflow-y': 'scroll',
		'text-align': 'right',
		'min-height': '20em',
		height: '100vh'
	},
	'#meta .meta-menu ul': {
		padding: 0,
		margin: '1em 1em 2em 0',
		'list-style-type': 'none'
	},
	'#meta .meta-menu ul li': {
		display: 'block',
		'float': 'right',
		background: 'white',
		opacity: 0.7,
		padding: '0.5em 1em',
		'border-radius': '1em',
		'margin-left': '0.25em',
		'margin-top': '0.25em',
		'cursor':  'pointer'
	},
	'#meta .meta-menu ul li:hover': {
		opacity: 1
	},
	'#meta a': {color: 'black'},
	'#meta .meta-menu ul:before': {
		content: "' '",
		display: 'block',
		'min-height': '15em',
		height: '50vh'
	},
	'#meta .meta-start': {
		cursor: 'pointer'
	}
});
function css(css){
	var tmp = '';
	$.each(css, function(c,r){
		tmp += c + ' {\n';
		$.each(r, function(k,v){
			tmp += '\t'+ k +': '+ v +';\n';
		});
		tmp += '}\n';
	});
	var tag = document.createElement('style');
	tag.innerHTML = tmp;
	$m.append(tag)
}
meta.ui.iniline = function(el, cssObj){
	for(var k in cssObj) { el.style[k] = cssObj[k]; }
}
return metaUI;
}).call(MODSELF={}, edide, MODSELF);
edide.metaEvents = (function (edide, metaEvents) {Object.defineProperty(this, 'module_name', {value:'metaEvents'});
var m = meta, k = m.key;
$(window).on('focus', k.wipe.bind(null, false)); // .on('blur', k.wipe.bind(null, false))
$(document).on('mousedown mousemove mouseup', function(eve){
	m.tap.eve = eve;
	m.tap.x = eve.pageX||0;
	m.tap.y = eve.pageY||0;
	m.tap.on = $(eve.target);
})
var [start, end] = 'ontouchstart' in window
										? ['touchstart', 'touchend']
										: ['mousedown', 'mouseup']
$(document).on(start, '#meta .meta-menu li', function(eve){
	var combo = $(this).data().combo;
	eve.fake = eve.which = combo && combo.slice(-1)[0].toUpperCase().charCodeAt(0);
	eve.tap = true;
	k.down(eve);
	$(document).one(end, () => k.up(eve))
return;
});
$(document).on('keydown', k.down).on('keyup', k.up);
$('#meta').on(start, function(ev) {
  if (ev.target.tagName == 'LI' || ev.target.tagName == 'UL') return
	meta.flip()
})
return metaEvents;
}).call(MODSELF={}, edide, MODSELF);
edide.domRemove = (function (edide, domRemove) {
return (element) => {
  var parentEl;
  if (typeof element === 'string') {
    element = edide.qs(element);
  }
  if ((parentEl = element != null ? element.parentElement : void 0) != null) {
    return parentEl.removeChild(element);
  } else {
    return console.info("failed to remove node", element);
  }
};
}).call(MODSELF={}, edide, MODSELF);
edide.metaJs = (function (edide, metaJs) {Object.defineProperty(this, 'module_name', {value:'metaJs'});
edide.jquery // .on unload
edide.metaCore  // main functionality
edide.metaUI    // Menu and styles
edide.metaEvents // jquery
edide.onUnload(() => {
  edide.domRemove('#meta')
  window.meta = null
})
return metaJs;
}).call(MODSELF={}, edide, MODSELF);

edide.global.metaJs = edide.metaJs;
})()